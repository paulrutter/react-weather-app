{"version":3,"sources":["CityInput.tsx","ColorSwitcher.tsx","WeatherHook.tsx","Weather.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CityInput","props","type","value","city","onChange","event","onCityChange","target","onKeyPress","e","key","onSubmit","placeholder","ColorSwitcher","handleOnClick","onColorChange","id","name","checked","color","htmlFor","getWeatherDescription","a","fetch","result","json","weather","description","useData","initialState","React","useState","data","setData","isLoading","setLoading","getWeatherData","w","concat","Math","random","getWeather","BorderDiv","styled","div","Weather","useWeatherHook","setCity","setColor","map","item","onClick","disabled","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPA+BeA,EA7BG,SAACC,GAgBf,OACI,6BACI,2BACIC,KAAK,OACLC,MAAOF,EAAMG,KACbC,SAhBW,SAACC,GACpBL,EAAMM,aAAaD,EAAME,OAAOL,QAgBxBM,WAbO,SAACC,GACF,UAAVA,EAAEC,KACFV,EAAMW,YAYFC,YAAY,uBCAbC,EAvBO,SAACb,GAInB,IAAMc,EAAgB,SAACT,GACnBL,EAAMe,cAAcV,EAAME,OAAOL,QAIrC,OACI,6BACI,6BACI,2BAAOE,SAAUU,EAAeb,KAAK,QAAQe,GAAG,MAAMC,KAAK,QAAQf,MAAM,MAAMgB,QAAyB,QAAhBlB,EAAMmB,QAC9F,2BAAOC,QAAQ,OAAf,QAEJ,6BACI,2BAAOhB,SAAUU,EAAeb,KAAK,QAAQe,GAAG,OAAOC,KAAK,QAAQf,MAAM,OAAOgB,QAAyB,SAAhBlB,EAAMmB,QAChG,2BAAOC,QAAQ,QAAf,W,+BCdVC,EAAqB,uCAAG,WAAOlB,GAAP,iBAAAmB,EAAA,sEACPC,MAAM,qDAAD,OAAsDpB,EAAtD,kBAHb,qCAEe,cACtBqB,EADsB,gBAENA,EAAOC,OAFD,cAEtBC,EAFsB,yBAGlBA,GAAWA,EAAQA,QAAWA,EAAQA,QAAQ,GAAGC,YAAc,IAH7C,2CAAH,sDAiCZC,EA1BC,WAAgC,IAA/BC,EAA8B,uDAAf,GAAe,EACnBC,IAAMC,SAAiBF,GADJ,mBACpCG,EADoC,KAC9BC,EAD8B,OAEXH,IAAMC,UAAS,GAFJ,mBAEpCG,EAFoC,KAEzBC,EAFyB,KAKrCC,EAAc,uCAAG,WAAgBjC,GAAhB,eAAAmB,EAAA,6DACnBa,GAAW,GADQ,SAEHd,EAAsBlB,GAFnB,OAEbkC,EAFa,OAGnBJ,EAAQD,EAAKM,OAAO,CAChBtB,GAAG,GAAD,OAAKuB,KAAKC,UACZrC,KAAMA,EACNuB,QAASW,KAEbF,GAAW,GARQ,2CAAH,sDAcpB,MAAO,CACHH,OACAE,YACAO,WAAYL,I,mGC3BpB,IAAMM,EAAYC,IAAOC,IAAV,KACS,SAAC5C,GAAD,OAAWA,EAAMmB,SAiC1B0B,EA9BC,WAAO,IAAD,EACsBC,EAAe,IAA/Cd,EADU,EACVA,KAAME,EADI,EACJA,UAAWO,EADP,EACOA,WADP,EAEMX,IAAMC,SAAS,IAFrB,mBAEX5B,EAFW,KAEL4C,EAFK,OAGQjB,IAAMC,SAAS,QAHvB,mBAGXZ,EAHW,KAGJ6B,EAHI,KAMZlC,EAAgB,SAACT,GACnBoC,EAAWtC,GACX4C,EAAQ,KAKZ,OACI,6BACI,4BACKf,EAAKiB,KAAI,SAACC,GAAD,OACN,wBAAIxC,IAAKwC,EAAKlC,IAAKkC,EAAK/C,KAAxB,KAAgC+C,EAAKxB,aAG7C,kBAACgB,EAAD,CAAWvB,MAAOA,GACd,kBAAC,EAAD,CAAWhB,KAAMA,EAAMG,aAAcyC,EAASpC,SAAUG,IACxD,4BAAQqC,QAASrC,EAAesC,SAAUlB,GAA1C,QAEA,kBAAC,EAAD,CAAef,MAAOA,EAAOJ,cAAeiC,O,MCrB7CK,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea284891.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CityInput = (props: {\r\n    city: string,\r\n    onCityChange: Function,\r\n    onSubmit: Function\r\n}) => {\r\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.onCityChange(event.target.value);\r\n    };\r\n\r\n    const keyPressed = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.onSubmit();\r\n        }\r\n    };\r\n\r\n    // See that this component now renders every value change\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                value={props.city}\r\n                onChange={handleOnChange}\r\n                onKeyPress={keyPressed}\r\n                placeholder=\"Enter city here!\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CityInput;","import React from 'react';\r\n\r\nconst ColorSwitcher = (props: { \r\n    color: string,\r\n    onColorChange: Function\r\n}) => {\r\n    const handleOnClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        props.onColorChange(event.target.value);\r\n    };\r\n\r\n    // See that this component now renders every value change\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input onChange={handleOnClick} type=\"radio\" id=\"red\" name=\"color\" value=\"red\" checked={props.color === \"red\"} />\r\n                <label htmlFor=\"red\">Red</label>\r\n            </div>\r\n            <div>\r\n                <input onChange={handleOnClick} type=\"radio\" id=\"blue\" name=\"color\" value=\"blue\" checked={props.color === \"blue\"} />\r\n                <label htmlFor=\"blue\">Blue</label>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorSwitcher;","import React from 'react';\r\nimport { City, Result } from './TypeDefs';\r\n\r\nconst apiKey = \"ef8971112fd66b495b5a09463ba02f38\";\r\n\r\nconst getWeatherDescription = async (city: string): Promise<string> => {\r\n    let result = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`);\r\n    let weather = await result.json();\r\n    return (weather && weather.weather) ? weather.weather[0].description : \"\"\r\n};\r\n\r\n// create the custom hook\r\nconst useData = (initialState = []): Result => {\r\n    const [data, setData] = React.useState<City[]>(initialState);\r\n    const [isLoading, setLoading] = React.useState(false);\r\n    \r\n    // create a function to fetch the data\r\n    const getWeatherData = async function (city: string) {\r\n        setLoading(true);\r\n        const w = await getWeatherDescription(city);\r\n        setData(data.concat({\r\n            id: `${Math.random()}`,\r\n            city: city,\r\n            weather: w\r\n        }));\r\n        setLoading(false);\r\n    };\r\n\r\n    // we can return whatever we want.\r\n    // returning an oject is the most flexible solution,\r\n    // in case this function gets extended in the future.\r\n    return {\r\n        data,\r\n        isLoading,\r\n        getWeather: getWeatherData,\r\n    };\r\n}\r\n\r\nexport default useData;","import React from 'react';\r\nimport CityInput from './CityInput';\r\nimport ColorSwitcher from './ColorSwitcher';\r\nimport styled from 'styled-components';\r\n\r\nimport useWeatherHook from './WeatherHook';\r\n\r\nconst BorderDiv = styled.div`\r\n    border:10px solid ${(props) => props.color};\r\n`\r\n\r\nconst Weather = () => {\r\n    const { data, isLoading, getWeather } = useWeatherHook([]);\r\n    const [city, setCity] = React.useState('');\r\n    const [color, setColor] = React.useState('blue');\r\n\r\n    // Check weather for entered text\r\n    const handleOnClick = (event: any) => {\r\n        getWeather(city);\r\n        setCity(\"\");\r\n    };\r\n\r\n\r\n    // return\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {data.map((item) => (\r\n                    <li key={item.id}>{item.city}: {item.weather}</li>\r\n                ))}\r\n            </ul>\r\n            <BorderDiv color={color}>\r\n                <CityInput city={city} onCityChange={setCity} onSubmit={handleOnClick} />\r\n                <button onClick={handleOnClick} disabled={isLoading}>Send</button>\r\n\r\n                <ColorSwitcher color={color} onColorChange={setColor}></ColorSwitcher>\r\n            </BorderDiv>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport Weather from './Weather';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Weather />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}